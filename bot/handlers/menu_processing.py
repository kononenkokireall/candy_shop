import logging
import os

from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InputMediaPhoto, InlineKeyboardButton
from sqlalchemy.orm import joinedload

from database.models import Order, OrderItem, User
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã ORM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database.orm_query import (
    orm_get_banner,
    orm_get_categories,
    orm_get_products,
    orm_delete_from_cart,
    orm_reduce_product_in_cart,
    orm_add_to_cart,
    orm_get_user_carts
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.inline import (
    get_user_main_btn,
    get_user_catalog_btn,
    get_user_product_btn,
    get_user_cart_btn,
    MenuCallBack
)

from utilit.paginator import Paginator


bot = Bot(token=os.getenv('TOKEN'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—É—Ä–æ–≤–µ–Ω—å 0)
async def main_menu(session, level, menu_name):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–Ω–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    banner = await orm_get_banner(session, menu_name)
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboards = get_user_main_btn(level=level)
    return image, keyboards


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞ (—É—Ä–æ–≤–µ–Ω—å 1)
async def catalog(session, level, menu_name):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–Ω–µ—Ä –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = await orm_get_categories(session)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboards = get_user_catalog_btn(level=level, categories=categories)
    return image, keyboards


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def pages(paginator: Paginator):
    btn = dict()
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥."
    if paginator.has_previous():
        btn["‚óÄÔ∏è–ü—Ä–µ–¥."] = "prev"
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥."
    if paginator.has_next():
        btn["–°–ª–µ–¥.‚ñ∂Ô∏è"] = "next"
    return btn


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—É—Ä–æ–≤–µ–Ω—å 2)
async def products(session, level, category, page):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products_user = await orm_get_products(session, category_id=category)
    paginator = Paginator(products_user, page=page)
    product_user = paginator.get_page()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    image = InputMediaPhoto(
        media=product_user.image,
        caption=f"<strong>{product_user.name}</strong>\n{product_user.description}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product_user.price, 2)} PLN.\n"
                f"<strong>–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages}</strong>",
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_btn = pages(paginator)
    keyboards = get_user_product_btn(
        level=level,
        category=category,
        page=page,
        pagination_btn=pagination_btn,
        product_id=product_user.id,
    )

    return image, keyboards


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π (—É—Ä–æ–≤–µ–Ω—å 3)
async def carts(session, level, menu_name, page, user_id, product_id):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if menu_name == 'delete':  # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        await orm_delete_from_cart(session, user_id, product_id)
        if page > 1: page -= 1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    elif menu_name == 'decrement':  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        is_cart = await orm_reduce_product_in_cart(session, user_id, product_id)
        if page > 1 and not is_cart: page -= 1
    elif menu_name == 'increment':  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        await orm_add_to_cart(session, user_id, product_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    carts_user = await orm_get_user_carts(session, user_id)

    if not carts_user:  # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        banner = await orm_get_banner(session, 'cart')
        image = InputMediaPhoto(media=banner.image, caption=f"<strong>{banner.description}</strong>")
        keyboards = get_user_cart_btn(
            level=level,
            page=None,
            pagination_btn=None,
            product_id=None,
        )
    else:
        # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º paginator
        paginator = Paginator(carts_user, page=page)
        cart = paginator.get_page()[0]

        cart_price = round(cart.quantity * cart.product.price, 2)
        total_price = round(sum(cart.quantity * cart.product.price for cart in carts_user), 2)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ–±—â—É—é —Å—É–º–º—É
        image = InputMediaPhoto(
            media=cart.product.image,
            caption=f"<strong>{cart.product.name}</strong>\n"
                    f"{cart.product.price}.PLN x {cart.quantity} = {cart_price}.PLN\n"
                    f"–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages} –≤ –∫–æ—Ä–∑–∏–Ω–µ.\n"
                    f"–û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {total_price}.PLN",
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π (–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä)
        pagination_btn = pages(paginator)
        keyboards = get_user_cart_btn(
            level=level,
            page=page,
            pagination_btn=pagination_btn,
            product_id=cart.product.id,
        )
    return image, keyboards


async def notify_admin(order_id: int, session: AsyncSession, bot: Bot):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        order = await session.get(Order, order_id)
        if not order:
            logging.error(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ user_id (BigInteger)
        user = await session.execute(
            select(User)
            .where(User.user_id == order.user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤–º–µ—Å—Ç–æ id
            .limit(1)
        )
        user = user.scalar()

        if not user:
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items = await session.execute(
            select(OrderItem)
            .where(OrderItem.order_id == order_id)
            .options(joinedload(OrderItem.product))
        )
        items = order_items.scalars().all()

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user.first_name:
            user_line = f"[{user.first_name}](tg://user?id={user.user_id})"
        else:
            user_line = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        message = (
            f"üõí **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}**\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_line}\n"
            f"üì± ID: {user.user_id}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            "**–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**\n"
        )

        for item in items:
            if item.product:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                message += f"- {item.product.name} ({item.quantity} √ó {item.price} PLN)\n"
            else:
                message += f"- –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω (ID: {item.product_id})\n"

        message += f"\nüíµ **–ò—Ç–æ–≥–æ:** {order.total_price} PLN"

        # 5. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"confirm_order_{order_id}"
            )
        )

        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω chat_id)
        await bot.send_message(
            chat_id='7552593310'
,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞
            text=message,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}", exc_info=True)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º


async def checkout(session: AsyncSession, user_id: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    banner = await orm_get_banner(session, 'order')

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    carts_user = await orm_get_user_carts(session, user_id)
    total_price = sum(item.quantity * item.product.price for item in carts_user)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order(user_id=user_id, total_price=total_price, status="pending")
    session.add(order)
    await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
    for cart_item in carts_user:
        order_item = OrderItem(
            order_id=order.id,
            product_id=cart_item.product_id,
            quantity=cart_item.quantity,
            price=cart_item.product.price
        )
        session.add(order_item)
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await notify_admin(order.id, session, bot)


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
    caption = (f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
               f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price} PLN\n"
               f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {banner.admin_link}")

    image = InputMediaPhoto(media=banner.image, caption=caption)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
    keyboards = InlineKeyboardBuilder()
    keyboards.add(InlineKeyboardButton(
            text="–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é",
            callback_data=MenuCallBack(level=0, menu_name='main').pack()
    ))

    return image, keyboards.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
async def get_menu_content(
        session: AsyncSession,
        level: int,
        menu_name: str,
        product_id: int | None = None,
        category: int | None = None,
        page: int | None = None,
        user_id: int | None = None,
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if level == 0:  # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return await main_menu(session, level, menu_name)
    elif level == 1:  # –ö–∞—Ç–∞–ª–æ–≥
        return await catalog(session, level, menu_name)
    elif level == 2:  # –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        return await products(session, level, category, page)
    elif level == 3:  # –ö–æ—Ä–∑–∏–Ω–∞
        return await carts(session, level, menu_name, page, user_id, product_id)
    elif level == 4:  # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        return await checkout(session,  user_id)

import logging

from aiogram import Bot
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from database.models import Order, User, OrderItem

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def notify_admin(order_id: int, session: AsyncSession, bot: Bot):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        order = await session.get(Order, order_id)
        if not order:
            logging.error(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ user_id (BigInteger)
        user = await session.execute(
            select(User)
            .where(User.user_id == order.user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤–º–µ—Å—Ç–æ id
            .limit(1)
        )
        user = user.scalar()

        if not user:
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        order_items = await session.execute(
            select(OrderItem)
            .where(OrderItem.order_id == order_id)
            .options(joinedload(OrderItem.product))
        )
        items = order_items.scalars().all()

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user.first_name:
            user_line = f"[{user.first_name}](tg://user?id={user.user_id})"
        else:
            user_line = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        message = (
            f"üõí **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}**\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_line}\n"
            f"üì± ID: {user.user_id}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            "**–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**\n"
        )

        for item in items:
            if item.product:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                message += f"- {item.product.name} ({item.quantity} √ó {item.price} PLN)\n"
            else:
                message += f"- –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω (ID: {item.product_id})\n"

        message += f"\nüíµ **–ò—Ç–æ–≥–æ:** {order.total_price} PLN"

        # 5. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"confirm_order_{order_id}"
            )
        )

        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω chat_id)
        await bot.send_message(
            chat_id='7552593310'
,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞
            text=message,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}", exc_info=True)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
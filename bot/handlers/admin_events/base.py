import logging

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_querys.orm_query_banner import orm_get_info_pages
from database.orm_querys.orm_query_category import orm_get_categories
from filters.chat_types import ChatTypeFilter, IsAdmin
from handlers.admin_events.admin_main import admin_router_root
from keyboards.inline_main import get_callback_btn
from keyboards.reply import get_keyboard
from states.states import OrderProcess, AddBanner

# –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("admin")

menu_keyboard_router = Router(name="admin_menu")
admin_router_root.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)


# Handler –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router_root.message(Command("admin"))
async def admin_question(
        message: types.Message
) -> None:
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


# Handler –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–º–µ–Ω–∞) –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@admin_router_root.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router_root.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(
        message: types.Message,
        state: FSMContext
) -> None:
    current_state = await state.get_state()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state is None:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return
    if OrderProcess.product_for_change:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        OrderProcess.product_for_change = None
    await state.clear()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)


# Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã(–≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ FSM)
@admin_router_root.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@admin_router_root.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(
        message: types.Message,
        state: FSMContext
) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return

    if current_state == OrderProcess.NAME:
        await message.answer('‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ')
        return

    previous = None
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    for step in OrderProcess.__all_states__:
        if step.state == current_state:
            if previous is None:
                await message.answer("üö® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                return
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n"
                f"{OrderProcess.TEXTS[previous.state]}"
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞
            )
            return
        previous = step


# Handler –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router_root.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(
        message: types.Message,
        state: FSMContext
) -> None:
    await state.clear()
    OrderProcess.product_for_change = None

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(OrderProcess.NAME)


# Handler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤)
@admin_router_root.message(F.text == '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')
async def admin_features(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession
) -> None:
    await state.clear()
    OrderProcess.product_for_change = None
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = await orm_get_categories(session)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º)
    btn = {
        category.name: f'category_{category.id}'
        for category in categories
        if category.name is not None  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    }

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup=get_callback_btn(btn=btn)
    )


# Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ—á–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö
# —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@admin_router_root.message(StateFilter(None),
                           F.text == '–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä')
async def add_and_change_image(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession
) -> None:
    await state.clear()
    OrderProcess.product_for_change = None
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    pages_names = [page.name for page in await orm_get_info_pages(session)]
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞–Ω–Ω–µ—Ä–∞.\n"
                         f"–í –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n"
                         f"{', '.join(pages_names)}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ-–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(AddBanner.IMAGE)

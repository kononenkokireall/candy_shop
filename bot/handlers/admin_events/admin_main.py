import logging
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Order, Product
from database.orm_querys.orm_query_banner import (
    orm_get_info_pages,
    orm_change_banner_image,

)
from database.orm_querys.orm_query_category import orm_get_categories
from database.orm_querys.orm_query_product import (
    orm_get_product,
    orm_get_products,
    orm_update_product,
    orm_add_product,
    orm_delete_product
)

from filters.chat_types import ChatTypeFilter, IsAdmin

from keyboards.inline_main import get_callback_btn
from keyboards.linline_admin import OrderAction

from keyboards.reply import get_keyboard

from states.states import OrderProcess, AddBanner

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
admin_router = Router()
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ
# –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)


# Handler –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(Command("admin"))
async def admin_question(message: types.Message) -> None:
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


# Handler –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–º–µ–Ω–∞) –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@admin_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state is None:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return
    if OrderProcess.product_for_change:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        OrderProcess.product_for_change = None
    await state.clear()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)


# Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã(–≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ FSM)
@admin_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return

    if current_state == OrderProcess.NAME:
        await message.answer('‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ')
        return

    previous = None
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    for step in OrderProcess.__all_states__:
        if step.state == current_state:
            if previous is None:
                await message.answer("üö® –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                return
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n"
                f"{OrderProcess.TEXTS[previous.state]}"
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞
            )
            return
        previous = step


# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(OrderProcess.NAME)


# Handler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤)
@admin_router.message(F.text == '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')
async def admin_features(message: types.Message,
                         session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = await orm_get_categories(session)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    btn = {category.name: f'category_{category.id}'
           for category in categories if category.name is not None}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                         reply_markup=get_callback_btn(btn=btn))


# Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ—á–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö
# —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@admin_router.message(StateFilter(None), F.text == '–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä')
async def add_and_change_image(message: types.Message, state: FSMContext,
                               session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    pages_names = [page.name for page in await orm_get_info_pages(session)]
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞–Ω–Ω–µ—Ä–∞.\n"
                         f"–í –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n"
                         f"{', '.join(pages_names)}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ-–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(AddBanner.IMAGE)


# Handler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–≤—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ name)
@admin_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_product_callback(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession
) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö callback
    if callback.data is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    parts = callback.data.split("_")
    product_id = parts[-1] if len(parts) > 1 else None

    if not product_id or not product_id.isdigit():
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        return

    product: Optional[Product] = await orm_get_product(session,
                                                       int(product_id))
    if product is None:
        OrderProcess.product_for_change = product
        await callback.answer("üîç –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if callback.message:
        await callback.message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    await state.set_state(OrderProcess.NAME)


# Handler –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ DESCRIPTION
@admin_router.message(OrderProcess.NAME, F.text)
async def add_name(message: types.Message, state: FSMContext) -> None:
    if message.text is None:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if message.text == "." and OrderProcess.product_for_change:
        await state.update_data(name=OrderProcess.product_for_change.name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM
    else:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        # –∏ –≤—ã–π—Ç–∏ –∏–∑ handler –Ω–µ –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(message.text) < 5 or len(message.text) > 150:
            await message.answer(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–∏–ª–∏ –±—ã—Ç—å –º–µ–Ω–µ–µ 5 —Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. \n"
                "–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM
        await state.update_data(name=message.text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(OrderProcess.DESCRIPTION)


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ NAME
@admin_router.message(OrderProcess.NAME)
async def add_name2(message: types.Message) -> None:
    await message.answer(
        "–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")


# Handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(OrderProcess.DESCRIPTION, F.text)
async def add_description(message: types.Message, state: FSMContext,
                          session: AsyncSession) -> None:
    if message.text is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    if message.text == "." and OrderProcess.product_for_change:
        await state.update_data(
            description=OrderProcess.product_for_change.description)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if len(message.text) < 5:
            await message.answer(
                "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. \n"
                "–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return
        await state.update_data(
            description=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = await orm_get_categories(session)
    btn = {category.name: str(category.id) for category in categories}
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                         reply_markup=get_callback_btn(btn=btn))
    await state.set_state(OrderProcess.CATEGORY)


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ DESCRIPTION
@admin_router.message(OrderProcess.DESCRIPTION)
async def add_description2(message: types.Message) -> None:
    await message.answer(
        "–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")


# Handler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data.startswith('category_'))
async def starring_at_product(callback: types.CallbackQuery,
                              session: AsyncSession) -> None:
    if callback.data is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    parts = callback.data.split('_')
    category_id = parts[-1] if len(parts) > 1 else None

    if not category_id or not category_id.isdigit():
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return

    products = await orm_get_products(session, int(category_id))
    if not products:
        await callback.answer("üì≠ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    for product in products:
        if callback.message and product.image:
            await callback.message.answer_photo(
                product.image,
                caption=f"üì¶ {product.name}\nüíµ –¶–µ–Ω–∞: {product.price}",
                reply_markup=get_callback_btn(btn={
                    "üóë –£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                }, sizes=(2,)))

            if callback.message:
                await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            await callback.answer()


# Handler –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Callback
@admin_router.callback_query(OrderProcess.CATEGORY)
async def category_choice(callback: types.CallbackQuery, state: FSMContext,
                          session: AsyncSession) -> None:

    if callback.data is None or not callback.data.isdigit():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    if int(callback.data) in [category.id for category in
                              await orm_get_categories(
                                  session)]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.answer()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(
            category=callback.data)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–∞–Ω–Ω—ã–µ FSM
        await callback.message.answer(
            '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.')
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(OrderProcess.PRICE)
    else:
        await callback.message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.answer()


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ CATEGORY
@admin_router.message(OrderProcess.CATEGORY)
async def category_choice2(message: types.Message) -> None:
    await message.answer("'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.'")


# Handler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@admin_router.message(OrderProcess.PRICE, F.text)
async def add_price(message: types.Message, state: FSMContext) -> None:

    if message.text is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É
    if message.text == "." and OrderProcess.product_for_change:
        await state.update_data(price=OrderProcess.product_for_change.price)
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            float(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM
        await state.update_data(price=message.text)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(OrderProcess.ADD_IMAGES)


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ PRICE
@admin_router.message(OrderProcess.PRICE)
async def add_price2(message: types.Message) -> None:
    await message.answer(
        "–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞")


# –î–æ–±–∞–≤–ª—è–µ–º/–∏–∑–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
# (—Ç–∞–º —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∏–º–µ–Ω–∞–º:
# main, catalog, cart(–¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã), about, payment, shipping
@admin_router.message(AddBanner.IMAGE, F.photo)
async def add_banner(message: types.Message, state: FSMContext,
                     session: AsyncSession) -> None:
    if message.photo is None or len(message.photo) == 0:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞–Ω–Ω–µ—Ä–∞")
        return

    if message.caption is None:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ 346
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞")
        return

    image_id = message.photo[-1].file_id
    for_page = message.caption.strip()
    pages_names = [page.name for page in await orm_get_info_pages(session)]
    if for_page not in pages_names:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\
                         \n{', '.join(pages_names)}")
        return
    await orm_change_banner_image(session, for_page, image_id, )
    await message.answer("–ë–∞–Ω–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω.")
    await state.clear()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@admin_router.message(AddBanner.IMAGE)
async def add_banner2(message: types.Message) -> None:
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞–Ω–Ω–µ—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞")


# Handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(OrderProcess.ADD_IMAGES, or_f(F.photo,
                                                    F.casefold()))
async def add_image(message: types.Message, state: FSMContext,
                    session: AsyncSession) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if message.text and message.text == "." and OrderProcess.product_for_change:
        await state.update_data(image=OrderProcess.product_for_change.image)

    elif message.photo:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        await state.update_data(image=message.photo[-1].file_id)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∏—â–∏")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ FSM
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if OrderProcess.product_for_change:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await orm_update_product(session,
                                     OrderProcess.product_for_change.id, data)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await orm_add_product(session, data)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–ò–∑–º–µ–Ω–µ–Ω",
                             reply_markup=ADMIN_KB)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n"
            f"–û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
            reply_markup=ADMIN_KB,
        )
        await state.clear()

    # –°–±—Ä–æ—Å –æ–±—ä–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    OrderProcess.product_for_change = None


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —à–∞–≥–µ ADD_IMAGES
@admin_router.message(OrderProcess.ADD_IMAGES)
async def add_image2(message: types.Message) -> None:
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∏—â–∏")


# Handler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data.startswith("delete_"))
async def delete_product_callback(callback: types.CallbackQuery,
                                  session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                              show_alert=True)
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    parts = callback.data.split("_")
    if len(parts) < 2 or not parts[-1].isdigit():
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",
                              show_alert=True)
        return

    product_id = int(parts[-1])

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await orm_delete_product(session, product_id)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message and isinstance(callback.message, types.Message):
            await callback.message.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


@admin_router.callback_query(
    OrderAction.filter(F.action == "confirm")
)
async def confirm_order_handler(
        callback: types.CallbackQuery,
        callback_data: OrderAction,
        session: AsyncSession,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    –î–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑¬ª.
    –§–∏–ª—å—Ç—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç,
     –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è `action` –≤ callback_data —Ä–∞–≤–Ω–æ "confirm".
    –§—É–Ω–∫—Ü–∏—è:
      1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data.
      2. –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
       –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition.
      3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–π–¥–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ –∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –æ–Ω —É–∂–µ.
      4. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "confirmed" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.
      5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.

    Args:
        callback (types. CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞.
        callback_data (OrderAction):
         –î–∞–Ω–Ω—ã–µ, —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ callback_data,
          —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–ª—è `action` –∏ `order_id`.
        session (AsyncSession):
         –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Raises:
        Exception: –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞,
                   –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
    """
    if callback.message is None:
        logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return

    try:
        if not callback.bot:
            logger.error("Bot instance not available")
            return
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = callback_data.order_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
        async with session.begin():
            order: Optional[Order] = await session.get(Order, order_id,
                                                       with_for_update=True)
            if not order:
                await callback.answer("üö® –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                      show_alert=True)
                return

            if order.status == "confirmed":
                await callback.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            order.status = "confirmed"
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await callback.bot.send_message(
                    chat_id=str(order.user_id),
                    text=(
                        "üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n"
                        "üì¶ –ó–∞–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123"
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", exc_info=True)
        await session.rollback()
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)


@admin_router.callback_query(
    OrderAction.filter(F.action == "cancel")
)
async def cancel_order_handler(
        callback: types.CallbackQuery,
        callback_data: OrderAction,
        session: AsyncSession,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª.
    –§–∏–ª—å—Ç—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª–µ `action` –≤ callback_data –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "cancel".

    –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:
      1. –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É,
       –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–º—É –∏–∑ callback_data, —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∑–∞–ø–∏—Å–∏
       –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition.
      2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∏ –Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.
      3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "cancelled"
       –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
      4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.
      5. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞—Ç
       —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.

    Args:
        callback (types. CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞.
        callback_data (OrderAction): –î–∞–Ω–Ω—ã–µ, —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ
         –∏–∑ callback_data, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–ª—è `action` –∏ `order_id`.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Raises:
        Exception: –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
        –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                   –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
        if not callback.bot:
            logger.error("–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        async with session.begin():
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è
            # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            order = await session.get(
                Order,
                callback_data.order_id,
                with_for_update=True  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            )

            if not order:
                await callback.answer("üö® –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                      show_alert=True)
                return

            if order.status == "cancelled":
                await callback.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order.status = "cancelled"
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await callback.bot.send_message(
                    chat_id=str(order.user_id),
                    text=(
                        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑. "
                        "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                raise

            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}", exc_info=True)
        await session.rollback()
        await callback.answer("üö® –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞", show_alert=True)

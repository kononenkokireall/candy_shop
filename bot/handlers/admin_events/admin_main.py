import logging
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import SQLAlchemyError

from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Order, Product, OrderStatus
from database.orm_querys.orm_query_banner import (
    orm_get_info_pages,
    orm_change_banner_image,

)
from database.orm_querys.orm_query_category import orm_get_categories
from database.orm_querys.orm_query_product import (
    orm_get_product,
    orm_get_products,
    orm_update_product,
    orm_add_product,
    orm_delete_product
)

from filters.chat_types import ChatTypeFilter, IsAdmin

from keyboards.inline_main import get_callback_btn
from keyboards.linline_admin import OrderAction

from keyboards.reply import get_keyboard

from states.states import OrderProcess, AddBanner

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

admin_router_root = Router(name="admin_root")
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ
# –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_router_root.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


# Handler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router_root.callback_query(F.data.startswith("delete_"))
async def delete_product_callback(
        callback: types.CallbackQuery,
        session: AsyncSession
) -> None:
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                              show_alert=True)
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    parts = callback.data.split("_")
    if len(parts) < 2 or not parts[-1].isdigit():
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",
                              show_alert=True)
        return

    product_id = int(parts[-1])

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await orm_delete_product(session, product_id)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message and isinstance(callback.message, types.Message):
            await callback.message.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
@admin_router_root.callback_query(OrderAction.filter(F.action == "confirm"))
async def confirm_order_handler(
        callback: types.CallbackQuery,
        callback_data: OrderAction,
        session: AsyncSession,
) -> None:
    if callback.message is None:
        logger.error("Callback –±–µ–∑ message")
        return

    order_id = callback_data.order_id

    try:
        # --- 1. –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞ -----------------------------------
        order: Order | None = await session.get(
            Order, order_id, with_for_update=True
        )
        if not order:
            await callback.answer("üö® –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if order.status == OrderStatus.CONFIRMED:
            await callback.answer("‚ÑπÔ∏è –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
            return

        # --- 2. –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ---------------------------------
        order.status = OrderStatus.CONFIRMED
        await session.commit()  # ‚Üê –∫–æ–º–º–∏—Ç —Ç—É—Ç

        # --- 3. —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è -------------------------------------
        try:
            await callback.bot.send_message(
                order.user_id,
                "<b>üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n"
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞\n"
                "üì¶ –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è 123",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.warning("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É: %s", e)

        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

    except SQLAlchemyError as db_err:
        await session.rollback()  # ‚Üê rollback –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å
        logger.error("DB-–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %s", db_err, exc_info=True)
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ë–î", show_alert=True)

    except Exception as e:
        await session.rollback()
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %s", e, exc_info=True)
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)


@admin_router_root.callback_query(OrderAction.filter(F.action == "cancel"))
async def cancel_order_handler(
        callback: types.CallbackQuery,
        callback_data: OrderAction,
        session: AsyncSession,
) -> None:
    """
    ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª.
    """
    # --- –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ --------------------------------------------------
    if callback.message is None:
        logger.error("Callback –±–µ–∑ message")
        return

    if not callback.bot:
        logger.error("Bot instance –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return

    order_id = callback_data.order_id

    try:
        # --- 1. –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞ ------------------------------------
        order: Order | None = await session.get(
            Order, order_id, with_for_update=True
        )
        if not order:
            await callback.answer("üö® –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if order.status == OrderStatus.CANCELLED:
            await callback.answer("‚ÑπÔ∏è –£–∂–µ –æ—Ç–º–µ–Ω—ë–Ω")
            return

        # --- 2. —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å CANCELLED –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ------------------------
        order.status = OrderStatus.CANCELLED
        await session.commit()

        # --- 3. —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è -------------------------------------
        try:
            await callback.bot.send_message(
                order.user_id,
                "<b>‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.</b>\n\n"
                "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ ‚Äì —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.warning("–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: %s", e)

        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

    except SQLAlchemyError as db_err:
        await session.rollback()
        logger.error("DB-–æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: %s", db_err, exc_info=True)
        await callback.answer("üö® –û—à–∏–±–∫–∞ –ë–î", show_alert=True)

    except Exception as e:
        await session.rollback()
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: %s", e, exc_info=True)
        await callback.answer("üö® –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞", show_alert=True)

# Handler –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Callback
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_querys.orm_query_category import orm_get_categories
from database.orm_querys.orm_query_product import orm_get_products
from handlers.admin_events.admin_main import admin_router_root
from keyboards.inline_main import get_callback_btn
from states.states import OrderProcess

category_router = Router(name="admin_category")

@admin_router_root.callback_query(OrderProcess.CATEGORY)
async def category_choice(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession
) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Ç–∏–ø–∞
    if callback.data is None or not callback.data.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await orm_get_categories(session)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    valid_category_ids = {category.id for category in categories}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if int(callback.data) in valid_category_ids:
        await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(category=callback.data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.')
        await state.set_state(OrderProcess.PRICE)
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        await callback.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞–Ω–∏—è


# Handler –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ CATEGORY
@admin_router_root.message(OrderProcess.CATEGORY)
async def category_choice2(message: types.Message) -> None:
    await message.answer("'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.'")


# Handler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router_root.callback_query(F.data.startswith('category_'))
async def starring_at_product(
        callback: types.CallbackQuery,
        session: AsyncSession
) -> None:
    if callback.data is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    parts = callback.data.split('_')
    category_id = parts[-1] if len(parts) > 1 else None

    if not category_id or not category_id.isdigit():
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return

    products = await orm_get_products(session, int(category_id))
    if not products:
        await callback.answer("üì≠ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    for product in products:
        if callback.message and product.image:
            await callback.message.answer_photo(
                product.image,
                caption=f"üì¶ {product.name}\nüíµ –¶–µ–Ω–∞: {product.price},\n"
                        f"üìä –û—Å—Ç–∞—Ç–æ–∫: <b>{product.stock}</b> —à—Ç.",
                reply_markup=get_callback_btn(btn={
                    "üóë –£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                }, sizes=(2,)))

            if callback.message:
                await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            await callback.answer()

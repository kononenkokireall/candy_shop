import logging
from typing import Optional

from aiogram import types, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession

from cache.invalidator import CacheInvalidator
from database.orm_querys.orm_query_cart import orm_add_to_cart
from database.orm_querys.orm_query_user import orm_add_user
from filters.chat_types import ChatTypeFilter
from handlers.menu_events.menu_processing_get import get_menu_content
from handlers.user_events.user_checkout import checkout
from keyboards.inline_main import MenuCallBack
from utilit.config import settings
from utilit.notification import NotificationService

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession) -> None:
    if not message.from_user:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ message")
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return

    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        media, reply_markup = await get_menu_content(session, level=0,
                                                     menu_name="main",
                                                     user_id=user_id,
                                                     )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if media is None or reply_markup is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è /start")
            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ media —è–≤–ª—è–µ—Ç—Å—è InputMediaPhoto, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if isinstance(media, InputMediaPhoto):
            await message.answer_photo(media.media, caption=media.caption,
                                       reply_markup=reply_markup)
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {type(media)}")
            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}",
                     exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º-–º–∞–≥–∞–∑–∏–Ω–æ–º.
    """
    help_text = (
        "üõç ** CBDS_Candies üç≠ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!**\n"
        "–ö–æ–ª–ø–∞–∫–∏ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–µ—Ç—ã –∏–∑ –ê–º—Å—Ç–µ—Ä–¥–∞–º–∞! üç¨\n\n"

        "üìå **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚ûñ /start ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é.\n"
        "‚ûñ /help ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É. ‚ÑπÔ∏è\n\n"

        "üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞:**\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã. üöö –î–µ—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ.\n\n"

        "üí≥ **–û–ø–ª–∞—Ç–∞:**\n"
        "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É BLIK, TON-–∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ. üí∞\n\n"

        "üè™ **–û –º–∞–≥–∞–∑–∏–Ω–µ:**\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —Ü–µ–Ω–∞–º! ‚ù§Ô∏è\n\n"

        "üõí **–ö–æ—Ä–∑–∏–Ω–∞:**\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ, —É–¥–∞–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. üîÑ\n\n"

        "üç¨ **–¢–æ–≤–∞—Ä—ã:**\n"
        "üç≠ *Cannabis Lollipops* ‚Äì –ª–µ–¥–µ–Ω—Ü—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏.\n"
        "ü•¶üí® *–ö–æ–ª–ø–∞–∫–∏* ‚Äì —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫.\n\n"

        "üì© **–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:**\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. @CBDS_support\n\n"

        "‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üí¨"
    )
    await message.answer(help_text)


# –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
async def add_to_cart(callback: types.CallbackQuery,
                      callback_data: MenuCallBack,
                      session: AsyncSession
                      ) -> None:
    user_local = callback.from_user
    if user_local is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                              show_alert=True)
        return

    await orm_add_user(session, user_id=user_local.id,
                       first_name=user_local.first_name,
                       last_name=user_local.last_name or "", phone=None)

    if callback_data.product_id is not None:
        await orm_add_to_cart(session, user_id=user_local.id,
                              product_id=callback_data.product_id)
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        await session.commit()
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.",
                              show_alert=True)


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é.
@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
        callback: types.CallbackQuery,
        callback_data: MenuCallBack,
        session: AsyncSession,
        notification_service: Optional[NotificationService] = None
) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if callback.from_user is None:
        logger.error("Callback –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        await callback.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if notification_service is None:
        notification_service = NotificationService(
            bot=callback.bot,
            admin_chat_id=settings.ADMIN_CHAT_ID
        )

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è –¥–ª—è —á–µ–∫ –∞—É—Ç–∞
        if callback_data.menu_name == "checkout" and callback_data.level == 4:
            media, keyboards = await checkout(
                session,
                callback.from_user.id,
                notification_service
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = callback.message
            if not isinstance(message, types.Message):
                await callback.answer(
                    "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!",
                    show_alert=True
                )
                return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if not message.photo:
                await callback.answer(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ!",
                    show_alert=True
                )
                return

            try:
                await callback.message.edit_media(media=media,
                                                  reply_markup=keyboards)
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞",
                                          show_alert=True)
                else:
                    raise
            finally:
                await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        if callback_data.menu_name == "add_to_cart":
            await add_to_cart(callback, callback_data, session)
            return

            # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤ –ø—Ä–∏ –∏—Ö –∑–∞–ø—Ä–æ—Å–µ
        if callback_data.menu_name == "banner":
            logger.debug(
                f"–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞: banner:{callback_data.page}")
            await CacheInvalidator.invalidate([
                f"banner:{callback_data.page}",
                f"menu:*{callback_data.page}*"
            ])

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é --------------------------------------

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        current_message = callback.message
        if not isinstance(current_message, types.Message):
            await callback.answer(
                "–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!",
                show_alert=True
            )
            return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_media = (current_message.photo[-1].file_id
                          if current_message.photo
                          else None
                          )
        original_reply_markup = current_message.reply_markup

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        media, reply_markup = await get_menu_content(
            session,
            level=callback_data.level,
            menu_name=callback_data.menu_name,
            category=callback_data.category,
            page=callback_data.page,
            user_id=callback.from_user.id,
            product_id=callback_data.product_id
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞
        if media is None:
            await callback.answer("–ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if isinstance(media, str):
            media = InputMediaPhoto(media=media)
        elif not isinstance(media, InputMediaPhoto):
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞.",
                                  show_alert=True)
            return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        is_media_changed = (isinstance(media, InputMediaPhoto) and
                            media.media != original_media
                            )
        is_markup_changed = str(reply_markup) != str(original_reply_markup)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
        if not is_media_changed and not is_markup_changed:
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.",
                                  show_alert=True)
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        try:

            await callback.message.edit_media(
                media=media,
                reply_markup=reply_markup
            )
        except TelegramBadRequest as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ "–Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            if "message is not modified" in str(e):
                logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await callback.answer()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞: {e}",
                             exc_info=True)
                await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                                      show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
                                  show_alert=True)
        finally:
            await callback.answer()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–µ–Ω—é: {e}",
                     exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                              show_alert=True)

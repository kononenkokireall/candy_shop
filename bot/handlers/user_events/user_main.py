import logging
import os

from aiogram import types, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import InputMediaPhoto, FSInputFile, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_querys.orm_query_cart import orm_add_to_cart
from database.orm_querys.orm_query_user import orm_add_user
from filters.chat_types import ChatTypeFilter
from handlers.menu_events.menu_processing_get import get_menu_content
from handlers.user_events.user_checkout import checkout
from keyboards.inline_main import MenuCallBack
from utilit.config import settings
from utilit.metrics import start_command_errors, start_command_counter, \
    start_command_duration
from utilit.notification import NotificationService

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@user_private_router.message(CommandStart())
async def start_cmd(
        message: types.Message,
        session: AsyncSession,  # –ø–æ–ª—É—á–∞–µ–º –∏–∑ middleware
) -> None:
    start_command_counter.inc()

    if not message.from_user:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç from_user")
        start_command_errors.inc()
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    user_id = message.from_user.id

    with start_command_duration.time():
        try:
            media, kb = await get_menu_content(
                session=session,
                level=0,
                menu_name="main",
                user_id=user_id,
            )

            if media is None or kb is None:
                raise RuntimeError("get_menu_content –≤–µ—Ä–Ω—É–ª None")

            # --- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
            if isinstance(media, InputMediaPhoto):
                await message.answer_photo(
                    photo=media.media, caption=media.caption, reply_markup=kb
                )
            else:  # Fallback: —Å—Ç—Ä–æ–∫–∞-file_id, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.
                await message.answer_photo(media, reply_markup=kb)

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ /start: %s", e, exc_info=True)
            start_command_errors.inc()
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
@user_private_router.message(Command("help"))
async def help_cmd(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º-–º–∞–≥–∞–∑–∏–Ω–æ–º.
    """
    help_text = (
        "üõç ** CBDS_Candies üç≠ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!**\n"
        "–ö–æ–ª–ø–∞–∫–∏ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–µ—Ç—ã –∏–∑ –ê–º—Å—Ç–µ—Ä–¥–∞–º–∞! üç¨\n\n"

        "üìå **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚ûñ /start ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é.\n"
        "‚ûñ /help ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É. ‚ÑπÔ∏è\n\n"

        "üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞:**\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã. üöö –î–µ—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ.\n\n"

        "üí≥ **–û–ø–ª–∞—Ç–∞:**\n"
        "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É BLIK, TON-–∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ. üí∞\n\n"

        "üè™ **–û –º–∞–≥–∞–∑–∏–Ω–µ:**\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —Ü–µ–Ω–∞–º! ‚ù§Ô∏è\n\n"

        "üõí **–ö–æ—Ä–∑–∏–Ω–∞:**\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ, —É–¥–∞–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. üîÑ\n\n"

        "üç¨ **–¢–æ–≤–∞—Ä—ã:**\n"
        "üç≠ *Cannabis Lollipops* ‚Äì –ª–µ–¥–µ–Ω—Ü—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏.\n"
        "ü•¶üí® *–ö–æ–ª–ø–∞–∫–∏* ‚Äì —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫.\n\n"

        "üì© **–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:**\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. @CBDS_support\n\n"

        "‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üí¨"
    )
    await message.answer(help_text)


# –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
async def add_to_cart(callback: types.CallbackQuery,
                      callback_data: MenuCallBack,
                      session: AsyncSession
                      ) -> None:
    user_local = callback.from_user
    if user_local is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                              show_alert=True)
        return

    try:
        # –£–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        # async with session.begin():
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await orm_add_user(session, user_id=user_local.id,
                           first_name=user_local.first_name,
                           last_name=user_local.last_name or "",
                           phone=None)

        if callback_data.product_id is not None:
            await orm_add_to_cart(session, user_id=user_local.id,
                                  product_id=callback_data.product_id)
            await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await callback.answer(
                "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.",
                show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}",
                     exc_info=True)
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.",
            show_alert=True)


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é.
@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
        callback: CallbackQuery,
        callback_data: MenuCallBack,
        session: AsyncSession,
        notification_service: NotificationService | None = None,
) -> None:

    user_id = callback.from_user.id if callback.from_user else None
    if not user_id:
        logger.error("Callback –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await callback.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
        return

    notification_service = notification_service or NotificationService(
        bot=callback.bot,
        admin_chat_id=settings.ADMIN_CHAT_ID,
    )

    try:
        # ------------------- checkout --------------------------------------
        if callback_data.menu_name == "checkout" and callback_data.level == 4:
            await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–∏–º –∑–∞–∫–∞–∑‚Ä¶")

            try:
                media, kb = await checkout(
                    session, user_id, notification_service
                )
            except ValueError as e:  ### <--- NEW
                # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞ (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞, –∏ —Ç.–¥.)
                await callback.message.answer(str(e))  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                await callback.answer()
                return

            if not callback.message:
                await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
                return

            if isinstance(media, str) and os.path.isfile(media):  ### <--- NEW
                media = InputMediaPhoto(media=FSInputFile(media))

            try:
                await callback.message.edit_media(media=media, reply_markup=kb)
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞", show_alert=True)
                else:
                    raise
            finally:
                await callback.answer()
            return

        # ------------------- add_to_cart -----------------------------------
        if callback_data.menu_name == "add_to_cart":
            await add_to_cart(callback, callback_data, session)
            await callback.answer()
            return

        # ------------------- –æ–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è -----------------------------
        message = callback.message
        if not message:
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        page = callback_data.page or 1

        media, new_markup = await get_menu_content(
            session,
            level=callback_data.level,
            menu_name=callback_data.menu_name,
            category=callback_data.category,
            page=page,
            user_id=user_id,
            product_id=callback_data.product_id,
        )
        if media is None:                                        ### <--- NEW
            await message.edit_reply_markup(reply_markup=new_markup)
            await callback.answer()
            return

        # --------- –ø—Ä–∏–≤–æ–¥–∏–º media –∫ InputMediaPhoto ------------------------
        if isinstance(media, str):
            if os.path.isfile(media):  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                media = InputMediaPhoto(media=FSInputFile(media))
            else:  # URL –∏–ª–∏ file_id
                media = InputMediaPhoto(media=media)
        elif not isinstance(media, InputMediaPhoto):
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞",
                                  show_alert=True)
            return

        try:
            await message.edit_media(media=media, reply_markup=new_markup)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ: %s", e)
            else:
                logger.error("–û—à–∏–±–∫–∞ edit_media: %s", e, exc_info=True)
                await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        else:
            await callback.answer()

    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ user_menu: %s", e, exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

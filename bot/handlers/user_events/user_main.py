from aiogram import types, Router
from aiogram.filters import CommandStart

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from telegram import InputMediaPhoto

from database.models import Order, OrderItem, User, Cart
from database.orm_querys.orm_query_banner import orm_get_banner
from database.orm_querys.orm_query_cart import orm_add_to_cart
from database.orm_querys.orm_query_user import orm_add_user

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from filters.chat_types import ChatTypeFilter
from handlers.admin_events.admin_main import checkout

from handlers.menu_events.menu_processing_get import get_menu_content
from keyboards.inline_main import MenuCallBack
from utilit.notification import NotificationService, get_notification_service

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_private_router = Router()

# –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç—ã —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
user_private_router.message.filter(ChatTypeFilter(["private"]))


##############################Handler –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è##################################################

# Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")
    # –ü–æ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)


#########################Handler –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è################################

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart(
        callback: types.CallbackQuery,
        callback_data: MenuCallBack,
        session: AsyncSession
):
    user_local = callback.from_user  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await orm_add_user(
        session,
        user_id=user_local.id,
        first_name=user_local.first_name,
        last_name=user_local.last_name,
        phone=None,
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    await orm_add_to_cart(session, user_id=user_local.id, product_id=callback_data.product_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

##################################Handler –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è##############################################

# Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö MenuCallBack
@user_private_router.callback_query(MenuCallBack.filter())
@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
        callback: types.CallbackQuery,
        callback_data: MenuCallBack,
        session: AsyncSession,
        notification_service: NotificationService = None
):
    if notification_service is None:
        notification_service = get_notification_service()

    if callback_data.menu_name == "checkout" and callback_data.level == 4:
        media, keyboards = await checkout(session, callback.from_user.id, notification_service)
        await callback.message.edit_media(media=media, reply_markup=keyboards)
        await callback.answer()


    if callback_data.menu_name == "add_to_cart":  # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        await add_to_cart(callback, callback_data, session)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–Ω—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        user_id=callback.from_user.id,
        product_id=callback_data.product_id,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ media –∏ reply_markup –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if not media:
        await callback.answer("–ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –ï—Å–ª–∏ media ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—ë –≤ InputMediaPhoto
    if isinstance(media, str):
        media = InputMediaPhoto(media=media)

    # –õ–æ–≥ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("Media:", media)
    print("Reply Markup:", reply_markup)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –º–µ–¥–∏–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_media(media=media, reply_markup=reply_markup)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞:", e)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞.", show_alert=True)

    await callback.answer()

##############################Handler —Ç–µ–∫—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è########################################
#
# # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
# async def generate_order_summary(order_id: int, session: AsyncSession) -> str:
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞"""
#     order = await session.get(Order, order_id)
#     items = await session.execute(
#         select(OrderItem)
#         .where(OrderItem.order_id == order_id)
#         .options(joined_load(OrderItem.product))
#     )
#     items = items.scalars().all()
#
#     payment_info = await orm_get_banner(session, "payment_info")
#
#     summary = (
#         "üìù *–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:*\n\n"
#         "üõí *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
#     )
#
#     for item in items:
#         summary += f"‚Ä¢ {item.product.name} - {item.quantity} —à—Ç. √ó {item.product.price} PLN\n"
#
#     summary += (
#         f"\nüíµ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* {order.total_price} PLN\n\n"
#         f"üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n{payment_info.description}\n\n"
#         "üì¶ *–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
#         "–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. "
#         "–°–∞–º–æ–≤—ã–≤–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –Ω–∞—à–µ–≥–æ –æ—Ñ–∏—Å–∞ –ø–æ –∞–¥—Ä–µ—Å—É: ..."
#     )
#
#     return summary

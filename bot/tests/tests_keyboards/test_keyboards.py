from unittest.mock import patch

import pytest
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup

from keyboards.inline_cart import get_user_cart_btn
from keyboards.inline_catalog import get_user_catalog_btn
from keyboards.inline_main import MenuCallBack, OrderCallbackData, get_user_main_btn, get_callback_btn
from keyboards.inline_product import get_user_product_btn
from keyboards.linline_admin import OrderAction, build_admin_keyboard, build_user_keyboard
from keyboards.reply import get_keyboard


# –¢–µ—Å—Ç—ã –¥–ª—è def get_keyboard
def test_basic_keyboard_creation():
    keyboard = get_keyboard(
        "–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2", "–ö–Ω–æ–ø–∫–∞ 3",
        sizes=(2, 1))

    assert isinstance(keyboard, ReplyKeyboardMarkup)
    assert len(keyboard.keyboard) == 2  # 2 —Ä—è–¥–∞
    assert len(keyboard.keyboard[0]) == 2  # –ü–µ—Ä–≤—ã–π —Ä—è–¥: 2 –∫–Ω–æ–ø–∫–∏
    assert len(keyboard.keyboard[1]) == 1  # –í—Ç–æ—Ä–æ–π —Ä—è–¥: 1 –∫–Ω–æ–ø–∫–∞


def test_special_buttons():
    keyboard = get_keyboard(
        "–û–±—ã—á–Ω–∞—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–õ–æ–∫–∞—Ü–∏—è",
        request_contact=1,
        request_location=2,
        sizes=(3,))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ request_contact
    contact_btn = keyboard.keyboard[0][1]
    assert contact_btn.request_contact is True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ request_location
    location_btn = keyboard.keyboard[0][2]
    assert location_btn.request_location is True


def test_placeholder():
    placeholder_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç"
    keyboard = get_keyboard(
        "–î–∞", "–ù–µ—Ç",
        placeholder=placeholder_text
    )

    assert keyboard.input_field_placeholder == placeholder_text


def test_keyboard_sizes():
    keyboard = get_keyboard(
        "A", "B", "C", "D", "E",
        sizes=tuple[int](2, ))

    assert len(keyboard.keyboard) == 3
    assert len(keyboard.keyboard[0]) == 2  # –ü–µ—Ä–≤—ã–µ 2 –∫–Ω–æ–ø–∫–∏
    assert len(keyboard.keyboard[1]) == 2  # –°–ª–µ–¥—É—é—â–∏–µ 2
    assert len(keyboard.keyboard[2]) == 1  # –ü–æ—Å–ª–µ–¥–Ω—è—è


# –¢–µ—Å—Ç—ã –¥–ª—è def build_admin_keyboard/build_user_keyboard/class OrderAction


def test_placeholders():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    markup = get_keyboard("–î–∞", "–ù–µ—Ç", placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç")
    assert markup.input_field_placeholder == "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç"


def test_empty_buttons():
    # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = get_keyboard(sizes=tuple[int]())
    assert len(markup.keyboard) == 0


# –¢–µ—Å—Ç—ã –¥–ª—è build_admin_keyboard/build_user_keyboard


# –¢–µ—Å—Ç—ã –¥–ª—è OrderAction
def test_order_action_callback():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    callback = OrderAction(action="confirm", order_id=123)
    packed = callback.pack()
    assert packed.startswith("order:confirm:123")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    unpacked = OrderAction.unpack(packed)
    assert unpacked.action == "confirm"
    assert unpacked.order_id == 123


# –¢–µ—Å—Ç—ã –¥–ª—è build_admin_keyboard
def test_admin_keyboard_structure():
    order_id = 456
    keyboard = build_admin_keyboard(order_id)

    assert isinstance(keyboard, InlineKeyboardMarkup)
    assert len(keyboard.inline_keyboard) == 1  # –û–¥–∏–Ω —Ä—è–¥
    assert len(keyboard.inline_keyboard[0]) == 2  # –î–≤–µ –∫–Ω–æ–ø–∫–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    confirm_btn = keyboard.inline_keyboard[0][0]
    assert confirm_btn.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    confirm_data = OrderAction.unpack(confirm_btn.callback_data)
    assert confirm_data.action == "confirm"
    assert confirm_data.order_id == order_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    cancel_btn = keyboard.inline_keyboard[0][1]
    assert cancel_btn.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    cancel_data = OrderAction.unpack(cancel_btn.callback_data)
    assert cancel_data.action == "cancel"
    assert cancel_data.order_id == order_id


# –¢–µ—Å—Ç—ã –¥–ª—è build_user_keyboard
@patch("utilit.config", "12345")  # TODO
def test_user_keyboard_structure():
    keyboard = build_user_keyboard()

    assert isinstance(keyboard, InlineKeyboardMarkup)
    assert len(keyboard.inline_keyboard) == 2  # –î–≤–∞ —Ä—è–¥–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞
    chat_btn = keyboard.inline_keyboard[0][0]
    assert chat_btn.text == "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º üí¨"
    assert chat_btn.url == "tg://user?id=7552593310"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_btn = keyboard.inline_keyboard[1][0]
    assert back_btn.text == "üè†–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"
    back_data = MenuCallBack.unpack(back_btn.callback_data)
    assert back_data.level == 0
    assert back_data.menu_name == "main"


def test_edge_cases():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤–æ–≥–æ order_id
    keyboard = build_admin_keyboard(0)
    confirm_data = OrderAction.unpack(keyboard.inline_keyboard[0][0].callback_data)
    assert confirm_data.order_id == 0


# –¢–µ—Å—Ç—ã –¥–ª—è get_user_product_btn


def test_basic_keyboard_structure():
    keyboard = get_user_product_btn(
        level=2,
        category=5,
        page=1,
        product_id=10,
        sizes=tuple[int](2, ))

    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    assert len(keyboard.inline_keyboard) == 2  # 2 —Ä—è–¥–∞ –∏–∑-–∑–∞ sizes=(2,1)

    # –ö–Ω–æ–ø–∫–∞ "‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è"
    back_btn = keyboard.inline_keyboard[0][0]
    back_data = MenuCallBack.unpack(back_btn.callback_data)
    assert back_data.level == 1  # level-1
    assert back_data.menu_name == "catalog"

    # –ö–Ω–æ–ø–∫–∞ "–ö–æ—Ä–∑–∏–Ω–∞ üõí"
    cart_btn = keyboard.inline_keyboard[0][1]
    cart_data = MenuCallBack.unpack(cart_btn.callback_data)
    assert cart_data.level == 3

    # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å üíµ"
    buy_btn = keyboard.inline_keyboard[1][0]
    buy_data = MenuCallBack.unpack(buy_btn.callback_data)
    assert buy_data.menu_name == "add_to_cart"
    assert buy_data.product_id == 10


def test_pagination():
    keyboard = get_user_product_btn(
        level=2,
        category=5,
        page=2,
        pagination_btn={"‚û°Ô∏è": "next", "‚¨ÖÔ∏è": "prev"},
        product_id=10
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    assert len(keyboard.inline_keyboard) == 3  # 2 —Ä—è–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö + 1 —Ä—è–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    # –ö–Ω–æ–ø–∫–∞ "next"
    next_btn = keyboard.inline_keyboard[2][0]
    next_data = MenuCallBack.unpack(next_btn.callback_data)
    assert next_data.page == 3
    assert next_data.menu_name == "next"

    # –ö–Ω–æ–ø–∫–∞ "prev"
    prev_btn = keyboard.inline_keyboard[2][1]
    prev_data = MenuCallBack.unpack(prev_btn.callback_data)
    assert prev_data.page == 1


def test_sizes_adjustment():
    keyboard = get_user_product_btn(
        level=2,
        category=5,
        page=1,
        product_id=10,
        sizes=(3,)
    )

    # –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    assert len(keyboard.inline_keyboard[0]) == 3


def test_edge_case():
    # –ü—É—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    keyboard = get_user_product_btn(
        level=2,
        category=5,
        page=0,
        pagination_btn={"Wrong": "invalid"},
        product_id=10
    )
    assert len(keyboard.inline_keyboard) == 2  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    keyboard = get_user_product_btn(
        level=1,
        category=5,
        page=-1,
        pagination_btn={"‚¨ÖÔ∏è": "prev"},
        product_id=10
    )
    prev_data = MenuCallBack.unpack(keyboard.inline_keyboard[2][0].callback_data)
    assert prev_data.page == -2


# –¢–µ—Å—Ç –¥–ª—è get_user_main_btn/get_callback_btn


# –¢–µ—Å—Ç—ã –¥–ª—è MenuCallBack
def test_menu_callback_data():
    callback = MenuCallBack(
        level=2,
        menu_name="catalog",
        category=5,
        product_id=10
    )
    packed = callback.pack()
    unpacked = MenuCallBack.unpack(packed)

    assert unpacked.level == 2
    assert unpacked.menu_name == "catalog"
    assert unpacked.category == 5
    assert unpacked.product_id == 10
    assert packed.startswith("menu:")


# –¢–µ—Å—Ç—ã –¥–ª—è OrderCallbackData
def test_order_callback_data():
    callback = OrderCallbackData(action="confirm", user_id=123)
    packed = callback.pack()

    assert "order:confirm" in packed
    assert OrderCallbackData.unpack(packed).user_id == 123


# –¢–µ—Å—Ç—ã –¥–ª—è get_user_main_btn
def test_get_user_main_btn():
    keyboard = get_user_main_btn(level=1, sizes=(2, 2, 1))

    assert isinstance(keyboard, InlineKeyboardMarkup)
    assert len(keyboard.inline_keyboard) == 3  # 2+2+1 –∫–Ω–æ–ø–æ–∫

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    catalog_btn = next(
        btn for row in keyboard.inline_keyboard
        for btn in row if btn.text == "–¢–æ–≤–∞—Ä—ã üç≠ üí®"
    )
    data = MenuCallBack.unpack(catalog_btn.callback_data)
    assert data.level == 2  # 1+1


# –¢–µ—Å—Ç—ã –¥–ª—è get_callback_btn
def test_get_callback_btn():
    test_buttons = {
        "–î–∞": "yes",
        "–ù–µ—Ç": "no",
        "–û—Ç–º–µ–Ω–∞": "cancel"
    }

    keyboard = get_callback_btn(btn=test_buttons, sizes=(2, 1))

    assert len(keyboard.inline_keyboard) == 2
    assert len(keyboard.inline_keyboard[0]) == 2
    assert keyboard.inline_keyboard[1][0].callback_data == "cancel"


@pytest.mark.parametrize("level,sizes,expected", [
    (0, (3,), 2),  # 3 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É + 2 –≤–æ –≤—Ç–æ—Ä–æ–º
    (2, (1,), 5),  # 5 —Ä—è–¥–æ–≤ –ø–æ 1 –∫–Ω–æ–ø–∫–µ
    (1, (5,), 1),  # –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
])
def test_keyboard_sizes(level, sizes, expected):
    keyboard = get_user_main_btn(level=level, sizes=sizes)
    assert len(keyboard.inline_keyboard) == expected


def test_edge_btn_cases():
    # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    empty_kb = get_callback_btn(btn={}, sizes=(2,))
    assert len(empty_kb.inline_keyboard) == 0

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    with pytest.raises(ValueError):
        MenuCallBack(level=-1, menu_name="invalid")


# –¢–µ—Å—Ç—ã –¥–ª—è get_user_catalog_btn


class MockCategory:
    def __init__(self, id: int, name: str):
        self.id = id
        self.name = name


def test_catalog_keyboard_basic_structure():
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = [
        MockCategory(1, "–ö–æ–Ω—Ñ–µ—Ç—ã"),
        MockCategory(2, "–®–æ–∫–æ–ª–∞–¥")
    ]

    keyboard = get_user_catalog_btn(
        level=2,
        categories=categories,
        sizes=(2,)
    )

    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    assert any(
        btn.text == "‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è"
        and MenuCallBack.unpack(btn.callback_data).level == 1
        for row in keyboard.inline_keyboard
        for btn in row
    )

    assert any(
        btn.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí"
        and MenuCallBack.unpack(btn.callback_data).level == 3
        for row in keyboard.inline_keyboard
        for btn in row
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_buttons = [
        btn for row in keyboard.inline_keyboard
        for btn in row
        if btn.text in {"–ö–æ–Ω—Ñ–µ—Ç—ã", "–®–æ–∫–æ–ª–∞–¥"}
    ]
    assert len(category_buttons) == 2


def test_category_buttons_data():
    categories = [MockCategory(5, "–ú–∞—Ä–º–µ–ª–∞–¥")]
    keyboard = get_user_catalog_btn(
        level=1,
        categories=categories,
        sizes=(1,)
    )

    category_btn = next(
        btn for row in keyboard.inline_keyboard
        for btn in row
        if btn.text == "–ú–∞—Ä–º–µ–ª–∞–¥"
    )
    data = MenuCallBack.unpack(category_btn.callback_data)

    assert data.level == 2
    assert data.menu_name == "–ú–∞—Ä–º–µ–ª–∞–¥"
    assert data.category == 5


@pytest.mark.parametrize("sizes,expected_total_rows", [
    ((2,), 3),  # 1 —Ä—è–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö + 2 —Ä—è–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    ((1, 1), 6),  # 2 —Ä—è–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö + 4 —Ä—è–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    ((3,), 2),  # 1 —Ä—è–¥ (–æ—Å–Ω–æ–≤–Ω—ã–µ + –∫–∞—Ç–µ–≥–æ—Ä–∏—è) + 1 —Ä—è–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
])
def test_keyboard_sizes(sizes, expected_total_rows):
    categories = [MockCategory(i, f"Cat{i}") for i in range(4)]
    keyboard = get_user_catalog_btn(
        level=2,
        categories=categories,
        sizes=sizes
    )
    assert len(keyboard.inline_keyboard) == expected_total_rows


def test_empty_categories():
    keyboard = get_user_catalog_btn(
        level=2,
        categories=[],
        sizes=(2,)
    )

    # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏ –ö–æ—Ä–∑–∏–Ω–∞
    assert sum(len(row) for row in keyboard.inline_keyboard) == 2
    assert all(btn.text in {"‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è", "–ö–æ—Ä–∑–∏–Ω–∞ üõí"}
               for row in keyboard.inline_keyboard
               for btn in row)


def test_pagination_with_different_levels():
    categories = [MockCategory(1, "Test")]

    for level in [1, 3, 5]:
        keyboard = get_user_catalog_btn(
            level=level,
            categories=categories,
            sizes=(1,)
        )
        category_btn = next(
            btn for row in keyboard.inline_keyboard
            for btn in row
            if btn.text == "Test"
        )
        data = MenuCallBack.unpack(category_btn.callback_data)
        assert data.level == level + 1


# –¢–µ—Å—Ç—ã –¥–ª—è get_user_cart_btn

def test_cart_with_page():
    keyboard = get_user_cart_btn(
        level=2,
        page=3,
        pagination_btn={"‚û°Ô∏è": "next", "‚¨ÖÔ∏è": "prev"},
        product_id=123,
        sizes=(3,))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    assert any(btn.text == "‚ùå –£–¥–∞–ª–∏—Ç—å" for row in keyboard.inline_keyboard for btn in row)
    assert any(btn.text == "‚ûñ" for row in keyboard.inline_keyboard for btn in row)
    assert any(btn.text == "‚ûï" for row in keyboard.inline_keyboard for btn in row)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    next_btn = next(btn for row in keyboard.inline_keyboard for btn in row if btn.text == "‚û°Ô∏è")
    next_data = MenuCallBack.unpack(next_btn.callback_data)
    assert next_data.page == 4

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    assert any(btn.text == "üè†–ú–µ–Ω—é" for row in keyboard.inline_keyboard for btn in row)
    assert any(btn.text == "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ üöÄ" for row in keyboard.inline_keyboard for btn in row)


def test_cart_without_page():
    keyboard = get_user_cart_btn(
        level=2,
        page=None,
        pagination_btn=None,
        product_id=None,
        sizes=(1,)
    )

    assert len(keyboard.inline_keyboard) == 1
    assert keyboard.inline_keyboard[0][0].text == "üè†–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"


@pytest.mark.parametrize("action,expected_page", [
    ("next", 4),
    ("prev", 2),
    ("invalid", None)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
])
def test_pagination_actions(action, expected_page):
    keyboard = get_user_cart_btn(
        level=2,
        page=3,
        pagination_btn={f"Btn": action},
        product_id=123,
    )

    btns = [btn for row in keyboard.inline_keyboard for btn in row if btn.text == "Btn"]
    if action in {"next", "prev"}:
        assert len(btns) == 1
        data = MenuCallBack.unpack(btns[0].callback_data)
        assert data.page == expected_page
    else:
        assert len(btns) == 0


def test_edge_btn_cart_cases():
    # –¢–µ—Å—Ç —Å page=0 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    keyboard = get_user_cart_btn(
        level=0,
        page=0,
        pagination_btn={"‚¨ÖÔ∏è": "prev"},
        product_id=0,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç–∞–∫ –∫–∞–∫ page-1 = -1 –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ)
    prev_btns = [btn for row in keyboard.inline_keyboard for btn in row if btn.text == "‚¨ÖÔ∏è"]
    assert len(prev_btns) == 0, "–ö–Ω–æ–ø–∫–∞ '‚¨ÖÔ∏è' –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ page=0"

    # –ü—É—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    keyboard = get_user_cart_btn(
        level=2,
        page=1,
        pagination_btn={},
        product_id=123,
    )
    assert len(keyboard.inline_keyboard) == 2  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏


# –¢–µ—Å—Ç—ã –¥–ª—è get_user_catalog_btn

class MocksCategory:
    def __init__(self, id: int, name: str):
        self.id = id
        self.name = name


def test_catalog_keyboard_basic():
    categories = [
        MockCategory(1, "–ö–æ–Ω—Ñ–µ—Ç—ã"),
        MockCategory(2, "–®–æ–∫–æ–ª–∞–¥")
    ]
    keyboard = get_user_catalog_btn(
        level=2,
        categories=categories,
        sizes=(2,)
    )

    assert isinstance(keyboard, InlineKeyboardMarkup)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    back_btn = next(btn for row in keyboard.inline_keyboard for btn in row if btn.text == "‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è")
    back_data = MenuCallBack.unpack(back_btn.callback_data)
    assert back_data.level == 1
    assert back_data.menu_name == "main"

    cart_btn = next(btn for row in keyboard.inline_keyboard for btn in row if btn.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí")
    cart_data = MenuCallBack.unpack(cart_btn.callback_data)
    assert cart_data.level == 3

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_btns = [btn for row in keyboard.inline_keyboard for btn in row if btn.text in {"–ö–æ–Ω—Ñ–µ—Ç—ã", "–®–æ–∫–æ–ª–∞–¥"}]
    assert len(category_btns) == 2
    assert all(
        MenuCallBack.unpack(btn.callback_data).category in {1, 2}
        for btn in category_btns
    )


def test_catalog_sizes():
    categories = [MockCategory(i, f"Cat{i}") for i in range(4)]
    keyboard = get_user_catalog_btn(
        level=1,
        categories=categories,
        sizes=(3, 1)
    )

    # 3 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É (–æ—Å–Ω–æ–≤–Ω—ã–µ + 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    # 1 –∫–Ω–æ–ø–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    assert len(keyboard.inline_keyboard[0]) == 3
    assert len(keyboard.inline_keyboard[1]) == 1


def test_empty_btn_categories():
    keyboard = get_user_catalog_btn(
        level=2,
        categories=[],
        sizes=(2,)
    )

    # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (2 –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
    assert len(keyboard.inline_keyboard) == 1
    assert len(keyboard.inline_keyboard[0]) == 2


def test_edge_btn_catalog_cases():
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID
    categories = [MockCategory(None, "Invalid")]
    keyboard = get_user_catalog_btn(
        level=2,
        categories=categories,
        sizes=(2,)
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ category=None
    category_btn = next(btn for row in keyboard.inline_keyboard for btn in row if btn.text == "Invalid")
    assert MenuCallBack.unpack(category_btn.callback_data).category is None

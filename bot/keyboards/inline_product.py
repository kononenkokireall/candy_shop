# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline_main import MenuCallBack

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
def get_user_product_btn(
        *,
        level: int,
        category: int,
        page: int,
        pagination_btn: dict,
        product_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton(
        text="‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥",
        callback_data=MenuCallBack(
            level=level - 1,
            menu_name='catalog').pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ "–ö–æ—Ä–∑–∏–Ω–∞"
    keyboard.add(InlineKeyboardButton(
        text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
        callback_data=MenuCallBack(
            level=3,
            menu_name='cart').pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
    keyboard.add(InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å üíµ",
        callback_data=MenuCallBack(
            level=level, menu_name='add_to_cart',
            product_id=product_id).pack()
    ))
    keyboard.adjust(*sizes)

    # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (pagination)
    row = []
    for text, menu_name in pagination_btn.items():
        if menu_name == 'next':  # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            row.append(InlineKeyboardButton(
                text=text, callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category=category,
                    page=page + 1).pack()
            ))
        elif menu_name == 'prev':  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            row.append(InlineKeyboardButton(
                text=text, callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category=category,
                    page=page - 1).pack()
            ))
    return keyboard.row(*row).as_markup()

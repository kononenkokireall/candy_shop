from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
class MenuCallBack(CallbackData, prefix="menu"):
    level: int  # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—é
    menu_name: str  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
    category: int | None = None  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    page: int = 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é
    product_id: int | None = None  # ID –ø—Ä–æ–¥—É–∫—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ –∑–∞–∫–∞–∑—É
class OrderCallbackData(CallbackData, prefix="order"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, "create", "confirm" –∏ —Ç.–¥.
    user_id: int | None = None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_main_btn(*, level: int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    btn = {
        "–¢–æ–≤–∞—Ä—ã üç≠|üí®": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å üí¨": "about",
        "–û–ø–ª–∞—Ç–∞ üí≥": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ üì¶": "shipping",
    }
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è
    for text, menu_name in btn.items():
        if menu_name == 'catalog':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level + 1,
                    menu_name=menu_name).pack()
            ))
        elif menu_name == 'cart':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=3,
                    menu_name=menu_name).pack()
            ))
        else:  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name).pack()
            ))
    return keyboard.adjust(*sizes).as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
def get_user_catalog_btn(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton(
        text="‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥",
        callback_data=MenuCallBack(
            level=level - 1,
            menu_name='main').pack()
    ))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
    keyboard.add(InlineKeyboardButton(
        text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
        callback_data=MenuCallBack(
            level=3,
            menu_name='cart').pack()
    ))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for ctg in categories:
        keyboard.add(InlineKeyboardButton(
            text=ctg.name,
            callback_data=MenuCallBack(
                level=level + 1,
                menu_name=ctg.name,
                category=ctg.id).pack()
        ))
    return keyboard.adjust(*sizes).as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞
def get_user_product_btn(
        *,
        level: int,
        category: int,
        page: int,
        pagination_btn: dict,
        product_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton(
        text="‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥",
        callback_data=MenuCallBack(
            level=level - 1,
            menu_name='catalog').pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ "–ö–æ—Ä–∑–∏–Ω–∞"
    keyboard.add(InlineKeyboardButton(
        text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
        callback_data=MenuCallBack(
            level=3,
            menu_name='cart').pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
    keyboard.add(InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å üíµ",
        callback_data=MenuCallBack(
            level=level, menu_name='add_to_cart',
            product_id=product_id).pack()
    ))
    keyboard.adjust(*sizes)

    # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (pagination)
    row = []
    for text, menu_name in pagination_btn.items():
        if menu_name == 'next':  # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            row.append(InlineKeyboardButton(
                text=text, callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category=category,
                    page=page + 1).pack()
            ))
        elif menu_name == 'prev':  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            row.append(InlineKeyboardButton(
                text=text, callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category=category,
                    page=page - 1).pack()
            ))
    return keyboard.row(*row).as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_cart_btn(
        *,
        level: int,
        page: int | None,
        pagination_btn: dict | None,
        product_id: int | None,
        sizes: tuple[int] = (3,)
):
    keyboard = InlineKeyboardBuilder()
    if page:  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        keyboard.add(InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å", callback_data=MenuCallBack(
                level=level,
                menu_name='delete',
                product_id=product_id,
                page=page).pack()
        ))
        keyboard.add(InlineKeyboardButton(
            text="-1", callback_data=MenuCallBack(
                level=level,
                menu_name='decrement',
                product_id=product_id,
                page=page).pack()
        ))
        keyboard.add(InlineKeyboardButton(
            text="+1", callback_data=MenuCallBack(
                level=level,
                menu_name='increment',
                product_id=product_id,
                page=page).pack()
        ))

        keyboard.adjust(*sizes)

        # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        row = []
        for text, menu_name in pagination_btn.items():
            if menu_name == 'next':
                row.append(InlineKeyboardButton(
                    text=text, callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        page=page + 1).pack()
                ))
            elif menu_name == 'prev':
                row.append(InlineKeyboardButton(
                    text=text, callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        page=page - 1).pack()

                ))
        keyboard.row(*row)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)
        row_2 = [
            InlineKeyboardButton(
                text="–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é",
                callback_data=MenuCallBack(level=0, menu_name='main').pack()
            ),
            InlineKeyboardButton(
                text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=MenuCallBack(level=4, menu_name='checkout').pack()
            ),
        ]
        return keyboard.row(*row_2).as_markup()
    else:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.add(InlineKeyboardButton(
            text="–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é",
            callback_data=MenuCallBack(
                level=0,
                menu_name='main').pack()
        ))
        return keyboard.adjust(*sizes).as_markup()


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
def get_payment_keyboard(order_id: int, user_id=None):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"confirm_order_{order_id}"
        ),
        InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            url=f"tg://user?id={user_id}"
        )
    )
    return keyboard.adjust(1).as_markup()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
def get_callback_btn(*, btn: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, data in btn.items():
        keyboard.add(InlineKeyboardButton(
            text=text,
            callback_data=data))

    return keyboard.adjust(*sizes).as_markup()

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from pydantic.v1 import validator


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
class MenuCallBack(CallbackData, prefix="menu"):
    level: int  # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—é
    menu_name: str  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
    category: int | None = None  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    page: int = 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é
    product_id: int | None = None  # ID –ø—Ä–æ–¥—É–∫—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)

    @validator('level') #TODO
    def validate_level(self, v):
        if v < 0:
            raise ValueError("Level cannot be negative")
        return v


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ –∑–∞–∫–∞–∑—É
class OrderCallbackData(CallbackData, prefix="order"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, "create", "confirm" –∏ —Ç.–¥.
    user_id: int | None = None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_main_btn(*, level: int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    btn = {
        "–¢–æ–≤–∞—Ä—ã üç≠ üí®": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å üí¨": "about",
        "–û–ø–ª–∞—Ç–∞ üí≥": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ üì¶": "shipping",
    }
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è
    for text, menu_name in btn.items():
        if menu_name == 'catalog':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level + 1,
                    menu_name=menu_name).pack()
            ))
        elif menu_name == 'cart':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=3,
                    menu_name=menu_name).pack()
            ))
        else:  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name).pack()
            ))
    return keyboard.adjust(*sizes).as_markup()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
def get_callback_btn(*, btn: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, data in btn.items():
        keyboard.add(InlineKeyboardButton(
            text=text,
            callback_data=data))

    return keyboard.adjust(*sizes).as_markup()
